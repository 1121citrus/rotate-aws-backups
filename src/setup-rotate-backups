#!/bin/sh

# Exit immediately on error
set -e -u -o pipefail
source /usr/local/include/1121citrus/common-functions

if [[ "${ROTATE_AWS_BACKUPS_DEBUG:-false}" = "true" ]]; then
    set -x -v
    function debug() {
        echo [DEBUG] "${@}"
        "${@}"
    }
else
    function debug() {
        "${@}"
    }
fi

if [[ -z "${AWS_ACCESS_KEY_ID}" ]]; then
    echo "[ERROR] Missing AWS_ACCESS_KEY_ID" > /dev/stdout && exit 1
fi
if [[ -z "${AWS_SECRET_ACCESS_KEY}" ]]; then
    echo "[ERROR] Missing AWS_SECRET_ACCESS_KEY" > /dev/stdout && exit 1
fi
if [[ -z "${AWS_S3_BUCKET_NAME}" ]]; then
    echo "[ERROR] Missing AWS_S3_BUCKET_NAME" > /dev/stdout && exit 1
fi

# Write cronjob env to file, fill in sensible defaults, and read them back in
touch .env
chmod 0755 .env
cat <<EOF > .env
AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION:-us-east-1}"
AWS_EXTRA_ARGS="${AWS_EXTRA_ARGS:-}"
AWS_GLACIER_VAULT_NAME="${AWS_GLACIER_VAULT_NAME:-}"
AWS_S3_BUCKET_NAME="${AWS_S3_BUCKET_NAME:?Need AWS_S3_BUCKET_NAME}"
ROTATE_AWS_BACKUPS_CRON_EXPRESSION="${ROTATE_BACKUPS_CRON_EXPRESSION:-@daily}"
ROTATE_AWS_BACKUPS_DAILY=${ROTATE_BACKUPS_DAILY:-7}
ROTATE_AWS_BACKUPS_DEBUG="${ROTATE_BACKUPS_DEBUG:-false}"
ROTATE_AWS_BACKUPS_DELETE_IGNORED=${ROTATE_BACKUPS_DELETE_IGNORED:-false}
ROTATE_AWS_BACKUPS_DRY_RUN=${ROTATE_BACKUPS_DRY_RUN:-false}
ROTATE_AWS_BACKUPS_HOURLY=${ROTATE_BACKUPS_HOURLY:-24}
ROTATE_AWS_BACKUPS_WEEKLY=${ROTATE_BACKUPS_WEEKLY:-4}
ROTATE_AWS_BACKUPS_YEARLY=${ROTATE_BACKUPS_YEARLY:-always}
ROTATE_AWS_BACKUPS_TIMESTAMP_PATTERN=${ROTATE_BACKUPS_TIMESTAMP_PATTERN:='(?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})[Tt](?P<hour>\d{2})(?P<minute>\d{2})(?P<second>\d{2})'}
ROTATE_AWS_BACKUPS_RELAXED=${ROTATE_BACKUPS_RELAXED:-true}
ROTATE_AWS_BACKUPS_OPTIONS=${ROTATE_BACKUPS_OPTIONS:-}
EOF
source .env

# Configure AWS CLI
mkdir -p .aws
cat <<EOF > .aws/credentials
[default]
aws_access_key_id = ${AWS_ACCESS_KEY_ID}
aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}
EOF
cat <<EOF > .aws/config
[default]
region = ${AWS_DEFAULT_REGION}
EOF

# Add our cron entry, and direct stdout & stderr to Docker commands stdout
echo "[INFO] Installing cron.d entry: rotate-aws-backup"
mkdir -p /var/spool/cron/crontabs
chmod 0755 /var/spool/cron/crontabs
mkdir -p /var/log
chmod 0755 /var/log/
touch /var/log/cron.log
chmod 0644 /var/log/cron.log
echo "${ROTATE_AWS_BACKUPS_CRON_EXPRESSION} /usr/local/bin/rotate-aws-backups > /var/log/cron.log 2>&1" > /var/spool/cron/crontabs/root
chmod 0644 /var/spool/cron/crontabs/root

# Let cron take the wheel
echo "[INFO] Starting cron with expression: ${ROTATE_AWS_BACKUPS_CRON_EXPRESSION}"
crond
tail -f /var/log/cron.log

